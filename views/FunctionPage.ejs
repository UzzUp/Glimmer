<!DOCTYPE html>
<html>
  <head>
		<meta charset="utf-8">
		
    <title>游戏大厅《Glimmer》</title>
		
		<!-- 设置页面图标 -->
		<link rel="shortcut icon" href="/images/logo/GlimmerIco.ico">

		<link rel="stylesheet" href="/stylesheets/bootstrap.min.css"/>
			
		<!-- 导入自身依赖 -->
		<link href="./UserStylesheets/FunctionPage.less" rel="stylesheet/less"/>
		<script type="text/javascript" src="javascripts/less.min.js"></script>
		<script type="text/javascript" src="./plug/vue.min.js"></script>
		<!-- 导入必要依赖 -->
		<script type="text/javascript" src="/javascripts/jquery.min.js"></script>
		<script type="text/javascript" src="/javascripts/axios.min.js"></script>
		<script type="text/javascript" src="/javascripts/bootstrap.min.js"></script>
		<script type="text/javascript" src="/javascripts/socket.io.js"></script>
		<!-- 导入依赖插件 -->
		<script type="text/javascript" src="./plug/layer/layer.js"></script>
		<script type="text/javascript">
			class Slider{
				//增加滑块对象的id
				Slider_id = ""
				Box = ""
				
				//构造方法,接受一个id
				constructor(id) {
					this.Slider_id = id;
					
					this.Box = $("#"+this.Slider_id)
					this.Box.css("transform","margin-top 3s")
					
				}
				
			}
		</script>
  </head>
  <body>
	<!-- 主体内容 -->
	<div class="container-fluid" style="height:97%;margin-top: 3%;">
		<div id="Show_Body" class="col-md-12">

			<div id="Function_List" class="col-md-2 USB_Border col-md-push-1">

				<!-- 用户的信息 -->
				<div id="User_Message">
					<div id="Head_Frame">
						<!-- 头像图片蒙版 -->
						<label>
							<div id="Head_Select">
								<!-- 提交头像文件 -->
								<form id="head_Form" method="post" enctype="multipart/form-data"
									onsubmit="return false">
									<input type="file" name="HeadImage" id='HeadFile' multiple
										style="visibility: hidden;">
									<font size="3" color="#ffffff">点击更换</font>
								</form>
							</div>
						</label>
						<img id="Head_Image" v-bind:src='ShowHead' style="width: 100%;height: 100%;" />
					</div>
					<!-- 用户名称 -->
					<font size="3" style="color: #fff;">{{ShowName}}</font>
				</div>
				<!-- 功能列表 -->
				<div id="Function">
					<template v-for="(ListMessage,index) in Functions">
						<div v-bind:id="ListMessage.Elid" @click="Frame_Select(ListMessage.Elid,index)"
							class="Select_Button S_Border">
							<img v-bind:src="ListMessage.Icon" width="30px" height="60%" style="margin-right: 10px;" />
							<font size="3" color="#03D0FF">{{ListMessage.name}}</font>
							<img v-show="ListMessage.Select" src="./images/UIimage/Select.png" width="30px" height="70%"
								style="right: 0; bottom: 0;position: absolute;" />
						</div>
					</template>
				</div>
			</div>
			<div id="Function_Page" class="col-md-8 col-md-push-1 USB_Border">
				<!-- 前端主页面 -->
				<div id="Main-box" v-if="ShowSelect == 'Main-box'">
					<img src="./images/BackImage/HelloUser.jpg" width="100%" height="100%" />
				</div>
				<!-- 好友单元 -->
				<div id="big-box" v-else-if="ShowSelect == 'big-box'">
					<!-- 根据好友数量设置好友单元数量 -->
					<div id="Friend_List">
						<template v-for="Message in GetFriendList">
							<div class="Unit-shows">
								<img class="F_Headimage" :src="Message.Headimage">
								<font>{{Message.name.length>3?Message.name.substring(0,3)+"..":Message.name}}</font>
								<img class="F_State" :src="'./images/UIimage/'+Message.State">
								<div class="USB_Border State_Frame">
									<!-- 按钮UI与事件绑定 -->
									<img class="State_UI " @click="OpenOnline(Message.UserId)"
										src="./images/UIimage/OnlineUp.png">
									<img class="State_UI " @click="" src="./images/UIimage/Means.png">
									<img class="State_UI " @click="" src="./images/UIimage/Set.png">
								</div>
							</div>
						</template>
					</div>
					<!-- 聊天信息显示框 -->
					<div id="Friend_Message">
						<div class="user_name">
							<img :src="Headimage">
							<span style="color: #fff;" v-text="name"></span>
						</div>
					</div>
					<!-- 聊天输入框 -->
					<div id="Send_Message">
						<div id="Send_Select">

						</div>
						<input id="Send_Button" @click="SendMessage()" class="btn btn-info" type="button"
							value="发送(Alt+S)">
						<textarea id="Send_Frame"></textarea>
					</div>
				</div>
				<!--支持less,vue,jquery,axios,bootstrap,layer插件-->
				<div id="Test-box" style="width: 100%;height: 100%;background-color: #003399;" v-else-if="ShowSelect == 'Test-box'">
					
				</div>
			</div>
		</div>
	</div>
	
	
		
		<!-- 放置ejs模板传来的值,供其他js文件使用 -->
		<script async type="text/javascript">	
			const Userid = "<%=UserId%>"//用户的id
			let UserName = "<%=name%>"//用户的名称
			let HeadImage = "<%=HeadImage%>"//头像路径
			let FriendList = JSON.parse('<%- JSON.stringify(FriendList)%>')//好友信息列表
			let FriendState = "<%=FriendState%>".split("|X|")//好友在线状态
		
					
			let MessageList = new Slider("MessageList")
			
			let socket = io.connect('http://localhost:3100')
			socket.emit('login',Userid);
			
			//Vue数据绑定
			//用户信息框的动态绑定
			let Message_frame = new Vue({
				el:"#User_Message",
				data:{
					UserName : UserName,
					HeadImage : HeadImage
				},
				computed:{
					ShowName : function(){//设置显现的名字的样式
						return (this.UserName).length>6?(this.UserName).substring(0,5)+"..":this.UserName
					},
					ShowHead : function(){//头像的显示路径
						return this.HeadImage
					}
				}
			})
			
			//功能显示窗口
			let Show_frame = new Vue({
				el:"#Function_Page",
				data:{
					ChatWith : "null",//聊天对象的ID
					ShowSelect : "big-box",
					FriendList : FriendList,
					FriendState : FriendState,
					Headimage : "HeadImage/AccountHead.png",
					name : "无"
				},
				computed:{
					//获取用户信息列表
					GetFriendList:function(){
						let Online = []//在线列表
						let Out = []//离线列表
						
						//根据用户状态排序，并设置信息组
						if(this.FriendState.length != 0){
							for(let X = 0 ,Y = this.FriendList.length;X<Y;X++){
								if(this.FriendState.indexOf(this.FriendList[X].UserId+"")!=-1){
									this.FriendList[X].State = "Online.png"
									Online.push(this.FriendList[X])
								}else{
									this.FriendList[X].State = "Out.png"
									Out.push(this.FriendList[X])
								}
								
								//当头像不存在时,使用默认头像代替
								if(this.FriendList[X].Headimage=="null"){
									this.FriendList[X].Headimage = "HeadImage/AccountHead.png"
								}
													
							}
						}
						this.FriendList = JsonJoin(Online,Out)
						//拼接两个列表并返回
						return this.FriendList
					},
				},
				methods:{
					OpenOnline:function(UserId){//打开聊天框事件
						this.ChatWith = UserId;//存储聊天对象的id
						this.GetChatWith();
					},
					GetChatWith:function(){//获取当前聊天对象的信息
						for(let X = 0,Y = this.FriendList.length;X<Y;X++){
							if(this.FriendList[X].UserId == this.ChatWith){
								this.Headimage = this.FriendList[X].Headimage;
								this.name = this.FriendList[X].name;
								break
							}
						}
					},
					SendMessage:function(){//发送消息事件[接受者id][发送者id][发送消息]
						socket.emit('Send',this.ChatWith+"|X|"+Userid+"|X|"+$("#Send_Frame").val());
					},
				}
			})
			
			//功能选择框的动态绑定
			let Function_frame = new Vue({
				el:"#Function",
				data:{
						Functions : [
							{
								Elid : "Main_Window",
								name : "我的首页",
								Icon : "./images/UIimage/home.png",
								Hframe : "Main-box",
								Select : false
							},
							{
								Elid : "Friend_Window",
								name : "好友信息",
								Icon : "./images/UIimage/Friend_On.png",
								Hframe : "big-box",								
								Select : true								
							},
							{
								Elid : "Game_Window",
								name : "游戏列表",
								Icon : "./images/UIimage/Game_On.png",
								Hframe : "Test-box",								
								Select : false
							}
						]
				},
				methods:{
					//界面选择
					Frame_Select : function(FrameName,index){
						//设置唯一选中状态
						for(let i = 0,y = this.Functions.length;i<y;i++){
								if(i == index){
									this.Functions[i].Select = true
								}else{
									this.Functions[i].Select = false
								}
						}
						//设置显示的界面
						Show_frame.ShowSelect = this.Functions[index].Hframe
					},
				}
			})
			
			// 拼接json类型的对象
			function JsonJoin(Json_One, Json_Tow) {
			  let Join_Json = []
				
				for (let X = 0, Y = Json_One.length;X<Y;X++) {
				  Join_Json.push(Json_One[X])
				}
				
				for (let X = 0, Y = Json_Tow.length;X<Y;X++) {
				  Join_Json.push(Json_Tow[X])
				}
				
				return Join_Json
			}
			
			//处理Socket连接事件
			socket.on('Send',function (Send_Message) {//获取消息事件[发送者id][消息内容]
				let Message_List = (Send_Message.Text).split("|X|")
				let Send_Name = "匿名用户"
				for(let X = 0 ,Y = Show_frame.FriendList.length;X<Y;X++){
					if(Show_frame.FriendList[X].UserId == Message_List[0]){
						Show_frame.FriendList[X].SNumber++
						Send_Name = Show_frame.FriendList[X].name
						LoginHint(Send_Name+":"+Message_List[1],()=>{})
						break
					}
				}
			})
		</script>
		<script Defer='Defer' type="text/javascript" src="./plug/NewFrame.js"></script>		
		<script Defer='Defer' type="text/javascript" src="./UserJavascripts/FunctionPage/index.js"></script>	
	</body>
</html>
